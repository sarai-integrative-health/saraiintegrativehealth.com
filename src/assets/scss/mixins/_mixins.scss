// header font mixin
@mixin font-header() {
	font-family: $header-font-family
}

// body font mixin
@mixin font-body() {
	font-family: $body-font-family
}

// heading font sizes function
// example: font-size: header-size(medium, h1);
@function header-size($breakpoint, $size) {
	@return rem-calc(map-get(map-get($header-sizes, $breakpoint), $size) * 1px);
}

@mixin header-size-responsive($size) {
	font-size: header-size(small, $size);
	@include breakpoint(medium) {
		font-size: header-size(medium, $size);
	}
}

// transition mixin
@mixin transition($args: all .25s ease-in-out) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}

// cross browser opacity
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

// generic transform
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}
// rotate
@mixin rotate($deg) {
	@include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
	@include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}

// box-shadow
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $color;
		-moz-box-shadow:inset $top $left $blur $color;
		box-shadow:inset $top $left $blur $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
	}
}

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
	$convertable-units: deg grad turn rad;
	$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
	@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
		@return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
	}

	@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
	$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

	@return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
	@if is-direction($value) == false {
		@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
	}

	$conversion-map: (
		to top          : bottom,
		to top right    : bottom left,
		to right top    : left bottom,
		to right        : left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom       : top,
		to bottom left  : top right,
		to left bottom  : right top,
		to left         : right,
		to left top     : right bottom,
		to top left     : bottom right
	);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

.no-pad {
	padding: 0;
}

@mixin generate-spacing-classes(
	$default-space-amounts-with-direction: (1 left l, 2 left l, 3 left l, 4 left l, 5 left l)
)
{
	@each $space in $default-space-amounts-with-direction {
		.m#{nth($space, 3)}-#{nth($space, 1)} {
			margin-#{nth($space, 2)}: #{nth($space, 1)}rem;
		}
		.m-#{nth($space, 1)} {
			margin: #{nth($space, 1)}rem;
		}
		.p#{nth($space, 3)}-#{nth($space, 1)} {
			padding-#{nth($space, 2)}: #{nth($space, 1)}rem;
		}
		.p-#{nth($space, 1)} {
			padding: #{nth($space, 1)}rem;
		}
	}
}

$right-space-vars: (1 right r, 2 right r, 3 right r, 4 right r, 5 right r);
$bottom-space-vars: (1 bottom b, 2 bottom b, 3 bottom b, 4 bottom b, 5 bottom b);
$top-space-vars: (1 top t, 2 top t, 3 top t, 4 top t, 5 top t);

@include generate-spacing-classes(); // left comes by default
@include generate-spacing-classes($right-space-vars);
@include generate-spacing-classes($bottom-space-vars);
@include generate-spacing-classes($top-space-vars);